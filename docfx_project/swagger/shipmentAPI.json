{
  "swagger": "2.0",
  "info": {
    "description": "Welcome to the REACT API reference. For more information on integrating with REACT, see the [integration guide](https://docs.sorted.com/react/registering-shipments/). ",
    "version": "1.1",
    "title": "REACT API Reference",
    "x-logo": {
      "url": "https://docs.sorted.com/react/api/images/logo.svg",
      "backgroundColor": "#fff",
      "altText": "REACT logo"
    }
  },
  "host": "react-api-qa.sorted.com",
  "basePath": "/react/shipments",
  "tags": [
    {
      "name": "Shipments API",
      "description": "Enables you to register shipments for tracking in REACT, and to manage your shipments once they're registered.",
      "externalDocs": {
        "description": "More information on the Shipment API",
        "url": "https://docs.sorted.com/react/"
      }
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/": {
      "post": {
        "tags": [
          "Shipments API"
        ],
        "summary": "Register Shipments",
        "description": "Register one or more shipments for tracking in Sorted.REACT.",
        "operationId": "Post",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RegisterShipmentRequest"  
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "id": "sp_18446744073709551615",
                "message": "Shipment record 'sp_18446744073709551615' with tracking reference ['TRK098JKH54ADD'] registered successfully.",
                "tracking_references": [
                  "TRK098JKH54ADD"
                ],
                "tags": [
                  "BRAND_X",
                  "Dewsbury_Hub",
                  "Outerwear",
                  "JAN_CAMPAIGN"
                ],
                "_links": [
                  {
                    "href": "https://api.sorted.com/react/shipment/sp_18446744073709551615",
                    "rel": "self"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": [
          "Shipments API"
        ],
        "summary": "Get Shipment",
        "description": "Returns shipments matching the provided query string parameters.",
        "operationId": "SearchGet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tracking_references",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "custom_references",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "A shipment object was returned successfully",
            "examples": {
              "application/json": {
                "Shipment": {
                  "properties": {
                    "tracking_references": {
                      "description": "The carrier's reference for this shipment.",
                      "uniqueItems": false,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "custom_references": {
                      "description": "A list of your own custom references for this shipment.",
                      "uniqueItems": false,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "description": "An optional list of tags to apply to this shipment.",
                      "uniqueItems": false,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "carrier": {
                      "description": "The name of the carrier of this shipment.",
                      "type": "string"
                    },
                    "carrier_service": {
                      "description": "The name of the carrier service of this shipment.",
                      "type": "string"
                    },
                    "shipped_date": {
                      "description": "The date on which the shipment was (or will be) shipped.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "order_date": {
                      "description": "The date on which the order was placed.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "promised_date": {
                      "description": "The date range on which the shipment should have been delivered to the customer.",
                      "$ref": "#/definitions/PromisedDate"
                    },
                    "expected_delivery_date": {
                      "description": "The date and time during which delivery is expected.",
                      "$ref": "#/definitions/ExpectedDeliveryDate"
                    },
                    "addresses": {
                      "description": "The addresses relevant to a shipment. Each address includes a \"Type\" property indicating the type of address, should include only 1 address of each type (e.g. 1 origin and 1 destination).",
                      "uniqueItems": false,
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Address"
                      }
                    },
                    "consumer": {
                      "description": "The consumer that the shipment relates to.",
                      "$ref": "#/definitions/Consumer"
                    },
                    "metadata": {
                      "description": "Optional metadata about this shipment.",
                      "uniqueItems": false,
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Metadata"
                      }
                    },
                    "retailer": {
                      "description": "An identifier for the retailer for this shipment.",
                      "type": "string"
                    },
                    "shipment_type": {
                      "description": "A property indicating the type of shipment, e.g. \"delivery\", \"pick_up\", \"drop_off\".",
                      "enum": [
                        "delivery",
                        "return",
                        "pick_up",
                        "drop_off",
                        "drop_off_pick_up",
                        "return_drop_off"
                      ],
                      "type": "string"
                    }
                  }
                }  
              }  
            }  
          }
        }
      }
    },
    "/{id}": {
      "get": {
        "tags": [
          "Shipments API"
        ],
        "summary": "Get Shipment by Shipment ID",
        "description": "Retrieve the details of the specified shipment.",
        "operationId": "ByIdGet",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A shipment object was returned successfully",
            "examples": {
              "application/json": {
                "Shipment": {
                  "properties": {
                    "tracking_references": {
                      "description": "The carrier's reference for this shipment.",
                      "uniqueItems": false,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "custom_references": {
                      "description": "A list of your own custom references for this shipment.",
                      "uniqueItems": false,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "tags": {
                      "description": "An optional list of tags to apply to this shipment.",
                      "uniqueItems": false,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "carrier": {
                      "description": "The name of the carrier of this shipment.",
                      "type": "string"
                    },
                    "carrier_service": {
                      "description": "The name of the carrier service of this shipment.",
                      "type": "string"
                    },
                    "shipped_date": {
                      "description": "The date on which the shipment was (or will be) shipped.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "order_date": {
                      "description": "The date on which the order was placed.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "promised_date": {
                      "description": "The date range on which the shipment should have been delivered to the customer.",
                      "$ref": "#/definitions/PromisedDate"
                    },
                    "expected_delivery_date": {
                      "description": "The date and time during which delivery is expected.",
                      "$ref": "#/definitions/ExpectedDeliveryDate"
                    },
                    "addresses": {
                      "description": "The addresses relevant to a shipment. Each address includes a \"Type\" property indicating the type of address, should include only 1 address of each type (e.g. 1 origin and 1 destination).",
                      "uniqueItems": false,
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Address"
                      }
                    },
                    "consumer": {
                      "description": "The consumer that the shipment relates to.",
                      "$ref": "#/definitions/Consumer"
                    },
                    "metadata": {
                      "description": "Optional metadata about this shipment.",
                      "uniqueItems": false,
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Metadata"
                      }
                    },
                    "retailer": {
                      "description": "An identifier for the retailer for this shipment.",
                      "type": "string"
                    },
                    "shipment_type": {
                      "description": "A property indicating the type of shipment, e.g. \"delivery\", \"pick_up\", \"drop_off\".",
                      "enum": [
                        "delivery",
                        "return",
                        "pick_up",
                        "drop_off",
                        "drop_off_pick_up",
                        "return_drop_off"
                      ],
                      "type": "string"
                    }
                  }
                }  
              }  
            }  
          }
        }
      },
      "put": {
        "tags": [
          "Shipments API"
        ],
        "summary": "Update Shipment",
        "description": "Update the details of a shipment.",
        "operationId": "ByIdPut",
        "consumes": [
          "application/json"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "shipment",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RegisterShipmentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "id": "sp_18446744073709551615",
                "message": "Shipment record 'sp_18446744073709551615' with tracking reference ['TRK098JKH54ADD'] updated successfully.",
                "tracking_references": [
                  "TRK098JKH54ADD"
                ],
                "tags": [
                  "BRAND_X",
                  "Dewsbury_Hub",
                  "Outerwear",
                  "JAN_CAMPAIGN"
                ],
                "_links": [
                  {
                    "href": "https://api.sorted.com/react/shipment/sp_18446744073709551615",
                    "rel": "self"
                  }
                ]
              }
            }    
          }
        }
      },
      "delete": {
        "tags": [
          "Shipments API"
        ],
        "summary": "Delete Shipment",
        "description": "Delete the specified shipment.",
        "operationId": "ByIdDelete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "id": "sp_18446744073709551615",
                "message": "Shipment record 'sp_18446744073709551615' with tracking reference ['TRK098JKH54ADD'] deleted successfully.",
                "tracking_references": [
                  "TRK098JKH54ADD"
                ]
              }
            }    
          }
        }
      }
    }
  },
  "definitions": {
    "Sorted.React.Shipment.Api.DataContracts.Internal.Inbound.Shipment": {
      "type": "object",
      "properties": {
        "carrier": {
          "type": "string"
        },
        "carrier_id": {
          "type": "string"
        },
        "carrier_service_reference": {
          "type": "string"
        },
        "shipped_date": {
          "format": "date-time",
          "type": "string"
        },
        "order_date": {
          "format": "date-time",
          "type": "string"
        },
        "promised_date": {
          "$ref": "#/definitions/PromisedDate"
        },
        "expected_delivery_date": {
          "$ref": "#/definitions/ExpectedDeliveryDate"
        },
        "addresses": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "metadata": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metadata"
          }
        },
        "shipment_type": {
          "enum": [
            "delivery",
            "return",
            "pick_up",
            "drop_off",
            "drop_off_pick_up",
            "return_drop_off"
          ],
          "type": "string"
        },
        "shipment_level": {
          "format": "int32",
          "type": "integer"
        },
        "delivered_date": {
          "format": "date-time",
          "type": "string"
        },
        "leg_number": {
          "format": "int32",
          "type": "integer"
        },
        "lateness": {
          "$ref": "#/definitions/Sorted.React.Shipment.Api.DataContracts.Internal.Inbound.Lateness"
        },
        "last_tracked": {
          "format": "date-time",
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "correlation_id": {
          "format": "uuid",
          "type": "string"
        },
        "tracking_event_timestamp": {
          "format": "date-time",
          "type": "string"
        },
        "shipment_state": {
          "$ref": "#/definitions/Sorted.React.Shipment.Api.DataContracts.Internal.Inbound.ShipmentState"
        }
      }
    },
    "PromisedDate": {
      "type": "object",
      "properties": {
        "start": {
          "format": "date-time",
          "type": "string"
        },
        "end": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ExpectedDeliveryDate": {
      "type": "object",
      "properties": {
        "start": {
          "format": "date-time",
          "type": "string"
        },
        "end": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "address_type": {
          "enum": [
            "not_specified",
            "origin",
            "destination",
            "return",
            "billing",
            "hub",
            "alternative_delivery",
            "other"
          ],
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "property_number": {
          "type": "string"
        },
        "property_name": {
          "type": "string"
        },
        "address_line1": {
          "type": "string"
        },
        "address_line2": {
          "type": "string"
        },
        "address_line3": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "postal_code": {
          "type": "string"
        },
        "country_iso_code": {
          "type": "string"
        },
        "lat_long": {
          "$ref": "#/definitions/LatLong"
        },
        "external_references": {
          "$ref": "#/definitions/ExternalAddressReference"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "type": {
          "enum": [
            "string",
            "datetime",
            "datetimeoffset",
            "boolean",
            "integer",
            "decimal",
            "url"
          ],
          "type": "string"
        }
      }
    },
    "Sorted.React.Shipment.Api.DataContracts.Internal.Inbound.Lateness": {
      "type": "object",
      "properties": {
        "is_late": {
          "type": "boolean"
        }
      }
    },
    "Sorted.React.Shipment.Api.DataContracts.Internal.Inbound.ShipmentState": {
      "type": "object",
      "properties": {
        "state": {
          "enum": [
            "unknown",
            "action_required",
            "arrived_at_destination_country",
            "at_customs",
            "awaiting_drop_off",
            "carrier_changed",
            "carrier_refused_to_collect",
            "carrier_unable_to_collect",
            "shipment_issue",
            "cleared_through_customs",
            "collected_by_carrier",
            "collection_rescheduled",
            "collection_scheduled",
            "customs_charges_due",
            "damaged",
            "delayed",
            "delivered",
            "delivered_damaged",
            "delivered_to_neighbour",
            "delivered_to_reception",
            "delivered_to_safe_location",
            "delivery_address_changed",
            "delivery_attempted",
            "delivery_failed",
            "delivery_failed_card_left",
            "delivery_refused",
            "delivery_rescheduled",
            "delivery_scheduled",
            "destroyed",
            "dispatched",
            "dropped_off",
            "exchange_failed",
            "exchange_successful",
            "failed_to_collect",
            "final_delivery_attempt",
            "for_information",
            "held_by_carrier",
            "incorrect_label",
            "in_transit",
            "in_transit_waiting",
            "lost",
            "missing",
            "missing_manifest",
            "misrouted",
            "out_for_delivery",
            "partially_delivered",
            "proof_of_delivery_available",
            "ready_for_collection",
            "refunded",
            "will_be_returned_to_sender",
            "returned_to_sender",
            "late",
            "collection_reminder",
            "final_collection_reminder",
            "may_be_missing",
            "unable_to_track"
          ],
          "type": "string"
        }
      }
    },
    "LatLong": {
      "type": "object",
      "properties": {
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "ExternalAddressReference": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "RegisterShipmentRequest": {
      "type": "object",
      "properties": {
        "shipments": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Shipment"
          }
        }
      }
    },
    "Shipment": {
      "properties": {
        "tracking_references": {
          "description": "The carrier's reference for this shipment.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": "QWERTYUIOP"
        },
        "custom_references": {
          "description": "A list of your own custom references for this shipment.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "description": "An optional list of tags to apply to this shipment.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "carrier": {
          "description": "The name of the carrier of this shipment.",
          "type": "string"
        },
        "carrier_service": {
          "description": "The name of the carrier service of this shipment.",
          "type": "string"
        },
        "shipped_date": {
          "description": "The date on which the shipment was (or will be) shipped.",
          "format": "date-time",
          "type": "string"
        },
        "order_date": {
          "description": "The date on which the order was placed.",
          "format": "date-time",
          "type": "string"
        },
        "promised_date": {
          "description": "The date range on which the shipment should have been delivered to the customer.",
          "$ref": "#/definitions/PromisedDate"
        },
        "expected_delivery_date": {
          "description": "The date and time during which delivery is expected.",
          "$ref": "#/definitions/ExpectedDeliveryDate"
        },
        "addresses": {
          "description": "The addresses relevant to a shipment. Each address includes a \"Type\" property indicating the type of address, should include only 1 address of each type (e.g. 1 origin and 1 destination).",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "consumer": {
          "description": "The consumer that the shipment relates to.",
          "$ref": "#/definitions/Consumer"
        },
        "metadata": {
          "description": "Optional metadata about this shipment.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metadata"
          }
        },
        "retailer": {
          "description": "An identifier for the retailer for this shipment.",
          "type": "string"
        },
        "shipment_type": {
          "description": "A property indicating the type of shipment, e.g. \"delivery\", \"pick_up\", \"drop_off\".",
          "enum": [
            "delivery",
            "return",
            "pick_up",
            "drop_off",
            "drop_off_pick_up",
            "return_drop_off"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Consumer": {
      "type": "object",
      "properties": {
        "reference": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile_phone": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "middle_name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "x-api-key": {
      "name": "x-api-key",
      "in": "header",
      "type": "apiKey",
      "description": "To query any of REACT's APIs, you’ll need an API key. You can create one from the **Settings > API Keys** tab on the REACT Dashboard. To use your key, add it in an `x-api-key` header to any reqests you make."
    }
  },
  "security": [
    {
      "x-api-key": []
    }
  ]
}